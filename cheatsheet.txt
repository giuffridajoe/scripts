git branch -a  #shows all available branches
git branch -d [branch name]  #deletes the specified branch
git checkout [branch name]  #changes to the specified branch
git checkout -b [branch name]  #creates and changes to specified branch, along with any modified files
git commit --allow-empty -m  #executes a no change commit with a commit message
git commit --allow-empty --allow-empty-message  #executes a no change commit without a commit message
git tag [tag name]  #adds a new tag
git tag -d [tag name]  #removes the tag
git tag -a [tag name] -m "comments"  #adds an annotated tag with a commit message
docker tag [project name]:[image name] [project name]:[tage name]  #creates a docker tag using the specified image
git fetch  #retrieves latest repo changes without merging into local repo
git checkout [branch to check out from] -- [file to check out] #checkout a file from another branch into current branch
git cherry-pick [commit id]  #applies specified commit to current branch
git checkout [branch name] -- [file name]  #copies specified file from specified branch to current branch
git log --oneline  #view commits of current branch
git log --after=["date"] --before=["date"]  #shows commits within specified range
git log --after="yesterday"  #shows commits from yesterday only
git log --after="today"  #shows commits from today only
git log --before="10 day ago"  #shows commits from the last 10 days 
git log --after="1 week ago"  #shows commits from the last week
git log --after="2 month ago"  #shows commits from 2 months ago
git log -p  #shows the log with diff changes
git log [filename]  #shows commits made to the specified file
git log [file1]..[file2]  #shows commits from file2 that are not in file1
git diff [branch name]...origin/[branch name]  #show diff between local and remote of the specified branch
git diff [branch name]... origin/[branch name] â€”stat  #shows only changed files between local and remote of the specified branch
git diff origin/master...[branch name]  #shows what has changed in [branch] since it diverged from master
docker service ps [service name]  #when run on the manager shows each docker node and the services running
docker ps -a  #shows all containers running including hidden
docker ps | grep [project/service name]  #shows only containers matching the specified project/service
scp file1 file2 [username]@[host name]:[path]  #copies multiple files from local to remote
scp {file1,file2} [username]@[host name]:[path] #copies multiple files from local to remote
scp *[file pattern] [username]@[host name]:[path] #copies multiple files from local to remote
scp [username]@[host name]:[path]\{file1,file2,file3\} .  #copies multiple files from remote to local
git commit --amend  #adds staged changes to the previous unpushed commit
ls -1 | wc -l 
  # -1 (that's a ONE) only one entry per line. Change to -1a to include hidden files. 
  # | pipe output onto...
  # wc "wordcount"
  # -l count lines

#rename branch locally and on remote
#rename step 1: local branch to new name
git branch -m [old branch name] [new branch name]
#rename step 2: delete old branch on remote
git push origin --delete [old branch name]
#rename step 3: reset upstream branch to the new local branch, push the new branch to remote 
git push origin -u [new branch name]
git push -u [remote (origin)] [branch to create upstream branch for]
git remote set-url [remote (origin)] ssh address of repo #set new upstream remote url of current branch
git remote -v  #list existing remote connections for current branch
git reset HEAD^ #undo the act of committing and everything that was staged, but leave the working tree (files intact). use "HEAD^" if on windows
git reset --hard HEAD^ #undo the act of committing, everything that was staged and reset previously changed files back to the previous commit (use "HEAD^" if on windows)
git reset --soft HEAD^ #undo the act of comitting but leave the files in staging (use "HEAD^" if on windows)
git branch -a --contains [commit id] #shows the branch associated with the commit ID
git stash #will stash all uncomitted changes
git stash pop #will restore the most recent stash
#to restart the webserver, ssh to tuktsweb01qa stop the httpd service then restart
systemctl stop httpd
systemctl restart httpd
#aws sqs send message with cli
aws sqs send-message --profile [profile] --queue-url [queue url] --message-body 'hello' --message-group-id testing --message-attributes 'TalksoftClientId={DataType=String, StringValue="709998"}, CPInitiated={DataType=String,StringValue="true"}'
#update perms on jenkins docker socket
chmod 777 /var/run/docker.sock; docker restart [container id]; docker exec -it [container id] bash
#add reddis db to insights
host=prod_redis_sentinel
port=26379
name=prod-redis
#aws sts get-session-token
aws sts get-session-token --serial-number [serial number] --token-code [code]--profile [non prod, non mfa profile]
